plugins {
    id 'net.minecraftforge.gradle' version "6.+"
    id 'wtf.gofancy.fancygradle' version '1.1.+'
    id 'org.spongepowered.mixin' version '0.7.+'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

version = "${version_major}.${version_minor}.${version_patch}"
group = ''
archivesBaseName = "${name}-${minecraft_version}"

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8'

minecraft {
    mappings channel: "${mappings_channel}", version: "${mappings_version}"
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        configureEach {
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            arg '-torg.spongepowered.asm.launch.MixinTweaker'
            jvmArgs '-Dfml.coreMods.load=baubles.coremod.BaublesPlugin', '-Dmixin.hotSwap=true', '-Dmixin.checks.interfaces=true'
        }

        client {
            args '--username=InDev'
            workingDirectory file('run')
        }

        server {}
    }

    legacy {
        fixClasspath = true
    }
}

apply from: 'gradle/scripts/necessary_dependencies.gradle'
apply from: 'gradle/scripts/dependencies.gradle'
apply from: 'gradle/scripts/templates.gradle'

tasks.register('cleanLogs', Delete) {
    group("custom tasks")
    delete("run/crash-reports")
    delete("run/logs")
}

jar {
    manifest {
        attributes(
                'FMLAT': 'accesstransformer.cfg',
                'FMLCorePlugin': 'baubles.coremod.BaublesPlugin',
                'ForceLoadAsMod': 'true',
                'FMLCorePluginContainsFMLMod': 'true',
                'TweakClass': 'org.spongepowered.asm.launch.MixinTweaker',
                'TweakOrder': '0'
        )
    }

    finalizedBy('reobfJar')
}

shadowJar {
    configurations = [project.configurations.shadow]
    mergeServiceFiles()
    dependencies {
        exclude 'LICENSE.txt'
        exclude 'org/spongepowered/asm/launch/MixinLaunchPlugin*'
        exclude 'org/spongepowered/asm/launch/MixinTransformationService*'
        exclude 'org/spongepowered/asm/launch/platform/container/ContainerHandleModLauncherEx*'
    }

    finalizedBy('reobfShadowJar')
}

reobf {
    shadowJar {}
}
buildscript {
    repositories {
        mavenCentral()
        maven { url = 'http://files.minecraftforge.net/maven' }
        maven { url = 'https://repo.spongepowered.org/maven' }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:3.+'
    }
}
        
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'idea'
//apply plugin: 'maven-publish'

version = "2.1.0"
group = 'com.darktire.baublesEX' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = name

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

minecraft {
    mappings channel: 'snapshot', version: '20171003-1.12'
//    mappings channel: 'snapshot', version: '20180814-1.12'
    runs {
        configureEach {
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
        }
        client {
            workingDirectory project.file('run')
        }

        server {}
    }
}

dependencies {
//    implementation ("net.minecraftforge:mergetool:0.2.3.3") { force = true }
    minecraft 'net.minecraftforge:forge:1.12.2-14.23.5.2860'
}

processResources {
    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand version:version, mcversion:'1.12.2'
    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
        exclude "BLogo_test.png"
    }
}

jar {
    manifest {
        attributes([
            "Specification-Title": "baublesEX",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar')

compileJava.options.encoding = 'UTF-8'

sourceSets {
    main {
        output.resourcesDir = java.outputDir
    }
}

tasks.register('copyResources', Copy) {
    from 'src/main/resources'
    into 'build/classes/java/main'
}

tasks.register('apiJar', Jar) {
    archiveClassifier = 'api'
    from sourceSets.main.output
    from sourceSets.main.allSource
    include 'baubles/api/**'
}

artifacts {
    archives apiJar
}

gradle.taskGraph.whenReady{
    taskGraph ->
        if(taskGraph.hasTask(":reobfJar")){
            clearSourcesDir
            sourceSets.main.output.resourcesDir(new File("build/resources"))
        }
}

tasks.register('clearSourcesDir') {
    delete(sourceSets.main.output.classesDirs)
}
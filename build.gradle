buildscript {
    repositories {
        mavenCentral()
        maven { url = 'https://maven.gofancy.wtf/releases' }
        maven { url = 'https://files.minecraftforge.net/maven' }
        maven { url = 'https://repo.spongepowered.org/maven' }
//        flatDir { dirs "libs" }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:6.+'
        classpath 'wtf.gofancy.fancygradle:wtf.gofancy.fancygradle.gradle.plugin:1.1.+'
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}
        
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'wtf.gofancy.fancygradle'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'idea'

version = "${version_major}.${version_minor}.${version_patch}"
group = ''
archivesBaseName = "${name}-${minecraft_version}"

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8'

minecraft {
    mappings channel: "${mappings_channel}", version: "${mappings_version}"
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        configureEach {
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            arg '-torg.spongepowered.asm.launch.MixinTweaker'
        }

        client {
            workingDirectory file('run')
        }

        server {}
    }
}

fancyGradle {
    patches {
        resources
        coremods
        codeChickenLib
        asm
        mergetool
    }
}

repositories {
    maven {
        name 'Garden of Fancy'
        url 'https://maven.gofancy.wtf/releases'
    }
    maven {
        name "Curse Maven"
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        name "Jared's maven"
        url "https://maven.blamejared.com/"
    }
    maven {
        name "CoFH Maven"
        url "https://maven.covers1624.net"
    }
//    maven { url "https://maven.tehnut.info" }
}

configurations {
    embed
    compile.extendsFrom(embed)
}

dependencies {
    minecraft(
        group  : "${forge_group}",
        name   : "forge",
        version: "${minecraft_version}-${forge_version}"
    )

    embed('org.spongepowered:mixin:0.8.+') {
        exclude module: 'guava'
        exclude module: 'commons-io'
        exclude module: 'gson'
    }
    implementation 'org.spongepowered:mixin:0.8.+'
    annotationProcessor 'org.spongepowered:mixin:0.8.+:processor'

    runtimeOnly fileTree(dir: 'libs', includes: ['*.jar'])
//    implementation fileTree(dir: 'libs', includes: ['*.jar'])

    //JEI
//    compileOnly fg.deobf("mezz.jei:jei_${minecraft_version}:${jei_version}:api")
    runtimeOnly fg.deobf("mezz.jei:jei_${minecraft_version}:${jei_version}")
    //CoFH
    runtimeOnly fg.deobf("curse.maven:redstone-flux-270789:2920436")
    implementation fg.deobf("curse.maven:cofh-core-69162:2920433")
    //Hwyla
//    compileOnly fg.deobf("mcp.mobius.waila:Hwyla:${hwyla_version}:api")
//    runtimeOnly fg.deobf("mcp.mobius.waila:Hwyla:${hwyla_version}")
}

mixin {
    add sourceSets.main, refmap_configs.replace('${mod_id}', mod_id)
    config mixin_configs.replace('${mod_id}', mod_id)

    debug.verbose = true
    debug.export = true
}

tasks.register('copyResource', Copy) {
    inputs.files sourceSets.main.resources.srcDirs

    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
        expand mod_id:mod_id, mod_name:mod_name, version:version, mcversion:minecraft_version
    }
    from(sourceSets.main.resources.srcDirs) {
        exclude '**/*.bak', '**/*.psd', 'mcmod.info'
    }
    into 'build/classes/java/main'
}

tasks.register('cleanLogs', Delete) {
    delete("run/crash-reports")
    delete("run/logs")
}

processResources.enabled = false
//processResources {}

classes.configure {
    dependsOn(copyResource)
}

jar {
//    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)

    from { configurations.embed.collect { it.isDirectory() ? it : zipTree(it) } } {
        exclude 'LICENSE.txt', 'META-INF/MANIFSET.MF', 'META-INF/maven/**', 'META-INF/*.RSA', 'META-INF/*.SF'
    }

    manifest {
        attributes(
                'ForceLoadAsMod': 'true',
                'FMLCorePluginContainsFMLMod': 'true',
                'TweakClass': 'org.spongepowered.asm.launch.MixinTweaker',
                'TweakOrder': '0'
        )
    }

    finalizedBy('reobfJar')
}
buildscript {
    repositories {
        mavenCentral()
        maven { url = 'https://maven.gofancy.wtf/releases' }
        maven { url = 'https://files.minecraftforge.net/maven' }
        maven { url = 'https://repo.spongepowered.org/maven' }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:6.+'
        classpath 'wtf.gofancy.fancygradle:wtf.gofancy.fancygradle.gradle.plugin:1.1.+'
//        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}
        
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'wtf.gofancy.fancygradle'
//apply plugin: 'org.spongepowered.mixin'
apply plugin: 'idea'

version = "${version_major}.${version_minor}.${version_patch}"
group = 'darktire.baubles'
archivesBaseName = "${name}-${minecraft_version}"

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8'

minecraft {
    mappings channel: "${mappings_channel}", version: "${mappings_version}"
    runs {
        configureEach {
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
        }

        client {
            workingDirectory file('run')
        }

        server {}
    }
}

fancyGradle {
    patches {
        resources
        coremods
        codeChickenLib
        asm
        mergetool
    }
}

repositories {
    maven {
        name 'Garden of Fancy'
        url 'https://maven.gofancy.wtf/releases'
    }
    maven {
        name = "Curse Maven"
        url = "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        name = "Jared's maven"
        url = "https://maven.blamejared.com/"
    }
    maven {
        name = "CoFH Maven"
        url = "https://maven.covers1624.net"
    }
}

configurations {
    provided
    compile.extendsFrom(provided)
}

dependencies {
    minecraft([
        group  : "${forge_group}",
        name   : "forge",
        version: "${minecraft_version}-${forge_version}"
    ])

//    provided('org.spongepowered:mixin:0.7.11-SNAPSHOT') {
//        exclude module: 'guava'
//        exclude module: 'commons-io'
//        exclude module: 'gson'
//    }
//    annotationProcessor 'org.spongepowered:mixin:0.7.11-SNAPSHOT'


    //JEI
    compileOnly fg.deobf("mezz.jei:jei_${minecraft_version}:${jei_version}:api")
    runtimeOnly fg.deobf("mezz.jei:jei_${minecraft_version}:${jei_version}")
    //CoFH
    runtimeOnly fg.deobf("curse.maven:redstone-flux-270789:2920436")
    implementation fg.deobf("curse.maven:cofh-core-69162:2920433")
}

//mixin {
//    add sourceSets.main, "mixins.baubles.refmap.json"
//    debug.export = true
//}

tasks.register('replaceResources', Copy) {
    outputs.upToDateWhen { false }
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
        expand version:version, mcversion:minecraft_version
    }
    into 'build/classes/java/main'
}

tasks.register('copyResources', Copy) {
    outputs.upToDateWhen { false }
    from(sourceSets.main.resources.srcDirs) {
        exclude "**/*.psd"
        exclude 'mcmod.info'
    }
    into 'build/classes/java/main'
}

processResources {}

classes.configure {
    dependsOn(replaceResources)
    dependsOn(copyResources)
}

jar {
    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
    manifest {
        attributes([
            'Specification-Title'     : 'BaublesEX',
            'Specification-Vendor'    : 'darktire',
            'Specification-Version'   : "${version}",
            'Implementation-Title'    : name,
            'Implementation-Version'  : "${version}",
            'Implementation-Vendor'   : 'darktire',
            'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            "Automatic-Module-Name": "${group}",
        ])
    }
    finalizedBy('reobfJar')
}

tasks.register('apiJar', Jar) {
    archiveClassifier = 'api'
    from sourceSets.main.output
    from sourceSets.main.allSource
    include 'baubles/api/**'
}

artifacts {
    archives apiJar
}

tasks.register('cleanLogs') {
    delete("run/crash-reports")
    delete("run/logs")
}